{
	"number": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data === '' || Number.isNaN(Number(Bridge.Node.data))",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number"
				}
			}
		},
		"@import.value": [
			"0",
			"1",
			"2",
			"3",
			"4",
			"5",
			"@wildcard"
		]
	},
	"number0_15": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data === '' || Number.isNaN(Number(Bridge.Node.data)) || Number(Bridge.Node.data) < 0 || Number(Bridge.Node.data) > 15",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number between 0 and 15"
				}
			}
		},
		"@import.value": [
			"0",
			"1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"10",
			"11",
			"12",
			"13",
			"14",
			"15"
		]
	},
	"number0_255": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data === '' || Number.isNaN(Number(Bridge.Node.data)) || Number(Bridge.Node.data) < 0 || Number(Bridge.Node.data) > 255",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number between 0 and 255"
				}
			}
		},
		"@import.value": [
			"0",
			"1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"10",
			"11",
			"12",
			"13",
			"14",
			"15",
			"16",
			"17",
			"18",
			"19",
			"20",
			"21",
			"22",
			"23",
			"24",
			"25",
			"26",
			"27",
			"28",
			"29",
			"30",
			"31",
			"32",
			"33",
			"34",
			"35",
			"36",
			"37",
			"38",
			"39",
			"40",
			"41",
			"42",
			"43",
			"44",
			"45",
			"46",
			"47",
			"48",
			"49",
			"50",
			"51",
			"52",
			"53",
			"54",
			"55",
			"56",
			"57",
			"58",
			"59",
			"60",
			"61",
			"62",
			"63",
			"64",
			"65",
			"66",
			"67",
			"68",
			"69",
			"70",
			"71",
			"72",
			"73",
			"74",
			"75",
			"76",
			"77",
			"78",
			"79",
			"80",
			"81",
			"82",
			"83",
			"84",
			"85",
			"86",
			"87",
			"88",
			"89",
			"90",
			"91",
			"92",
			"93",
			"94",
			"95",
			"96",
			"97",
			"98",
			"99",
			"100",
			"101",
			"102",
			"103",
			"104",
			"105",
			"106",
			"107",
			"108",
			"109",
			"110",
			"111",
			"112",
			"113",
			"114",
			"115",
			"116",
			"117",
			"118",
			"119",
			"120",
			"121",
			"122",
			"123",
			"124",
			"125",
			"126",
			"127",
			"128",
			"129",
			"130",
			"131",
			"132",
			"133",
			"134",
			"135",
			"136",
			"137",
			"138",
			"139",
			"140",
			"141",
			"142",
			"143",
			"144",
			"145",
			"146",
			"147",
			"148",
			"149",
			"150",
			"151",
			"152",
			"153",
			"154",
			"155",
			"156",
			"157",
			"158",
			"159",
			"160",
			"161",
			"162",
			"163",
			"164",
			"165",
			"166",
			"167",
			"168",
			"169",
			"170",
			"171",
			"172",
			"173",
			"174",
			"175",
			"176",
			"177",
			"178",
			"179",
			"180",
			"181",
			"182",
			"183",
			"184",
			"185",
			"186",
			"187",
			"188",
			"189",
			"190",
			"191",
			"192",
			"193",
			"194",
			"195",
			"196",
			"197",
			"198",
			"199",
			"200",
			"201",
			"202",
			"203",
			"204",
			"205",
			"206",
			"207",
			"208",
			"209",
			"210",
			"211",
			"212",
			"213",
			"214",
			"215",
			"216",
			"217",
			"218",
			"219",
			"220",
			"221",
			"222",
			"223",
			"224",
			"225",
			"226",
			"227",
			"228",
			"229",
			"230",
			"231",
			"232",
			"233",
			"234",
			"235",
			"236",
			"237",
			"238",
			"239",
			"240",
			"241",
			"242",
			"243",
			"244",
			"245",
			"246",
			"247",
			"248",
			"249",
			"250",
			"251",
			"252",
			"253",
			"254",
			"255"
		]
	},
	"decimal": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data === '' || Number.isNaN(Number(Bridge.Node.data))",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number"
				}
			}
		},
		"@import.value": [
			"0.0",
			"0.1",
			"0.2",
			"0.3",
			"0.4",
			"0.5",
			"0.6",
			"0.7",
			"0.8",
			"0.9",
			"@wildcard"
		]
	},
	"degree": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data === '' || Number.isNaN(Bridge.Node.data)",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number"
				}
			}
		},
		"@import.value": [
			"45",
			"90",
			"135",
			"180",
			"225",
			"270",
			"335",
			"360"
		]
	},
	"boolean": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data !== 'true' && Bridge.Node.data !== 'false'",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected boolean"
				}
			}
		},
		"@import.value": [
			"true",
			"false"
		]
	},
	"number_boolean": {
		"@meta": {
			"validate": {
				"confirm": "Bridge.Node.data !== '0' && Bridge.Node.data !== '1'",
				"then": {
					"show": true,
					"message": "Invalid data type: Expected number (0 or 1)"
				}
			}
		},
		"@import.value": [
			"0",
			"1"
		]
	},
	"format_version": {
		"@meta": {
			"validate": "formatVersion.js",
			"propose_filter": {
				"value": "Bridge.Version.compare(Bridge.Item, Bridge.Version.ProjectTarget, '<=')"
			}
		},
		"@import.value": [
			"1.8.0",
			"1.9.0",
			"1.10.0",
			"1.11.0",
			"1.12.0",
			"1.13.0",
			"1.14.0",
			"1.16.0",
			"1.16.100",
			"1.16.200",
			"1.16.210",
			"1.16.220",
			"1.17.0",
			"1.17.10",
			"1.17.20",
			"1.17.30",
			"1.17.40",
			"1.18.0",
			"1.18.10",
			"1.18.20",
			"1.18.30",
			"1.19.0",
			"1.19.10",
			"1.19.20",
			"1.19.30",
			"1.19.40",
			"1.19.50",
			"1.19.60",
			"1.19.70",
			"1.19.80",
			"1.20.0",
			"1.20.10",
			"1.20.20",
			"1.20.30",
			"1.20.40",
			"1.20.50"
		]
	},
	"translatable_text": {
		"@meta": {
			"is_value": true
		}
	},
	"file_identifier": {
		"@meta": {
			"validate": [
				{
					"confirm": "Bridge.Node.data && Bridge.Node.data.includes(' ')",
					"then": {
						"show": true,
						"message": "Identifiers must not contain spaces"
					}
				},
				{
					"confirm": "Bridge.Node.data && Bridge.Node.data.toLowerCase() !== Bridge.Node.data",
					"then": {
						"show": true,
						"message": "Identifiers must not contain uppercase letters"
					}
				}
			]
		},
		"@import.value.file_identifier": "($dynamic.setting.project_prefix + $dynamic.current_file_name)"
	},
	"inventory_type": [
		"horse",
		"minecart_chest",
		"chest_boat",
		"minecart_hopper",
		"inventory",
		"container",
		"hopper"
	],
	"damage_type": [
		"all",
		"anvil",
		"block_explosion",
		"charging",
		"contact",
		"drowning",
		"entity_attack",
		"entity_explosion",
		"fall",
		"falling_block",
		"fire",
		"fire_tick",
		"fireworks",
		"fly_into_wall",
		"freezing",
		"lava",
		"lightning",
		"magic",
		"magma",
		"none",
		"override",
		"piston",
		"projectile",
		"stalactite",
		"stalagmite",
		"starve",
		"suffocation",
		"suicide",
		"temperature",
		"thorns",
		"void",
		"wither"
	],
	"potion_number_id": [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31",
		"32",
		"34",
		"35",
		"36",
		"37",
		"38",
		"39",
		"40",
		"41"
	],
	"hourly_clock_time": [
		"0",
		"1000",
		"2000",
		"3000",
		"4000",
		"5000",
		"6000",
		"7000",
		"8000",
		"9000",
		"10000",
		"11000",
		"12000",
		"13000",
		"14000",
		"15000",
		"16000",
		"17000",
		"18000",
		"19000",
		"20000",
		"21000",
		"22000",
		"23000",
		"24000"
	],
	"poi_type": [
		"bed"
	],
	"slot_type": [
		"slot.armor",
		"slot.armor.chest",
		"slot.armor.feet",
		"slot.armor.head",
		"slot.armor.legs",
		"slot.chest",
		"slot.enderchest",
		"slot.equippable",
		"slot.hotbar",
		"slot.inventory",
		"slot.saddle",
		"slot.weapon.mainhand",
		"slot.weapon.offhand"
	],
	"hands": [
		"mainhand",
		"offhand"
	],
	"ability": [
		"worldbuilder",
		"invulnerable",
		"flying",
		"instabuild",
		"flySpeed",
		"lightning",
		"walkSpeed",
		"noclip",
		"mayfly",
		"mute"
	],
	"has_equipment_slot": [
		"any",
		"armor",
		"feet",
		"hand",
		"head",
		"leg",
		"inventory",
		"torso"
	],
	"color_palette": [
		"white",
		"light_green",
		"orange",
		"silver",
		"magenta",
		"light_blue",
		"yellow",
		"pink",
		"blue",
		"gray",
		"cyan",
		"purple",
		"brown",
		"green",
		"red",
		"black"
	],
	"structures": [
		"ancient_city",
		"bastion_remnant",
		"buried_treasure",
		"end_city",
		"fortress",
		"mansion",
		"mineshaft",
		"monument",
		"pillager_outpost",
		"ruined_portal",
		"ruins",
		"shipwreck",
		"stronghold",
		"temple",
		"trail_ruins",
		"village"
	],
	"particle_name": [
		"mobspellambient",
		"villagerangry",
		"blockbreak",
		"blockdust",
		"bubble",
		"evaporation",
		"crit",
		"dragonbreath",
		"driplava",
		"dripwater",
		"reddust",
		"spell",
		"mobappearance",
		"enchantingtable",
		"endrod",
		"mobspell",
		"largeexplode",
		"hugeexplosion",
		"fallingdust",
		"fireworksspark",
		"waterwake",
		"flame",
		"villagerhappy",
		"heart",
		"mobspellinstantaneous",
		"iconcrack",
		"slime",
		"snowballpoof",
		"largesmoke",
		"lava",
		"mobflame",
		"townaura",
		"nautilus",
		"note",
		"explode",
		"portal",
		"rainsplash",
		"smoke",
		"watersplash",
		"ink",
		"terrain",
		"totem",
		"trackingemitter",
		"witchspell"
	],
	"entity_identifier": {
		"@meta": {
			"definitions": [
				"entity"
			]
		},
		"@import.value.entity": "$dynamic.cache.entity.identifiers and $vanilla.entity_identifier"
	},
	"block_identifier": {
		"@meta": {
			"definitions": [
				"block"
			]
		},
		"@import.value.block": "$dynamic.cache.block.identifiers and $vanilla.block_identifier"
	},
	"item_identifier": {
		"@meta": {
			"definitions": [
				"item"
			]
		},
		"@import.value.item": "$dynamic.cache.item.identifiers and $vanilla.item_identifier"
	},
	"model_identifier": {
		"@meta": {
			"is_value": true,
			"definitions": [
				"entity_model"
			]
		},
		"@import.value": "$dynamic.cache.model.identifiers",
		"@import.value_old": "$dynamic.cache.model.old_identifiers"
	},
	"fog_identifier": "$dynamic.cache.fog.identifiers and $vanilla.fog_identifier",
	"effect_name": [
		"all",
		"absorption",
		"bad_omen",
		"blindness",
		"conduit_power",
		"fatal_poison",
		"fire_resistance",
		"haste",
		"health_boost",
		"hunger",
		"instant_damage",
		"instant_health",
		"invisibility",
		"jump_boost",
		"levitation",
		"mining_fatigue",
		"nausea",
		"night_vision",
		"poison",
		"regeneration",
		"resistance",
		"saturation",
		"slow_falling",
		"slowness",
		"speed",
		"strength",
		"village_hero",
		"water_breathing",
		"weakness",
		"wither",
		"darkness"
	],
	"enchantment_name": [
		"aqua_affinity",
		"bane_of_arthropods",
		"binding",
		"blast_protection",
		"channeling",
		"depth_strider",
		"efficiency",
		"feather_falling",
		"fire_aspect",
		"fire_protection",
		"flame",
		"fortune",
		"frost_walker",
		"impaling",
		"infinity",
		"knockback",
		"looting",
		"loyalty",
		"luck_of_the_sea",
		"lure",
		"mending",
		"multishot",
		"piercing",
		"power",
		"projectile_protection",
		"protection",
		"punch",
		"quick_charge",
		"respiration",
		"riptide",
		"sharpness",
		"silk_touch",
		"smite",
		"soul_speed",
		"thorns",
		"unbreaking",
		"vanishing",
		"swift_sneak"
	],
	"gamerule": [
		"alwaysday",
		"commandblockoutput",
		"commandblocksenabled",
		"dodaylightcycle",
		"doentitydrops",
		"dofiretick",
		"doinsomnia",
		"doimmediaterespawn",
		"domobloot",
		"domobspawning",
		"dowardenspawning",
		"dotiledrops",
		"doweathercycle",
		"drowningdamage",
		"falldamage",
		"firedamage",
		"freezedamage",
		"functioncommandlimit",
		"keepinventory",
		"maxcommandchainlength",
		"mobgriefing",
		"naturalregeneration",
		"playersleepingpercentage",
		"pvp",
		"randomtickspeed",
		"respawnblocksexplode",
		"sendcommandfeedback",
		"showbordereffect",
		"showcoordinates",
		"showdeathmessages",
		"showtags",
		"spawnradius",
		"tntexplodes"
	],
	"game_difficulty": [
		"easy",
		"e",
		"hard",
		"h",
		"normal",
		"n",
		"peaceful",
		"p"
	],
	"dimensions": [
		"nether",
		"overworld",
		"the_end"
	],
	"gamemode": [
		"adventure",
		"creative",
		"default",
		"survival",
		"spectator"
	],
	"biome_tag": [
		"monster",
		"animal",
		"ocean",
		"nether",
		"the_end",
		"mooshroom_island",
		"plains",
		"desert",
		"jungle",
		"taiga",
		"extreme_hills",
		"savanna",
		"frozen",
		"cold",
		"lukewarm",
		"warm",
		"river",
		"swamp",
		"beach",
		"flower_forest",
		"forest",
		"birch",
		"dark_oak",
		"hills",
		"mutated",
		"edge",
		"lakes",
		"plateau",
		"deep",
		"mesa",
		"ice_plains",
		"ice",
		"caves",
		"mountains",
		"shore",
		"stone",
		"roofed",
		"mega",
		"netherwart_forest",
		"crimson_forest",
		"warped_forest",
		"soulsand_valley",
		"nether_wastes",
		"basalt_deltas",
		"spawn_few_zombified_piglins",
		"spawn_piglin",
		"spawn_endermen",
		"spawn_ghast",
		"spawn_magma_cubes",
		"spawn_many_magma_cubes",
		"overworld",
		"overworld_generation"
	],
	"biome_name": [
		"ice",
		"dripstone_caves",
		"frozen_peaks",
		"grove",
		"jagged_peaks",
		"snowy_slopes",
		"stony_peaks",
		"caves",
		"lush_caves",
		"meadow",
		"forest",
		"extreme_hills",
		"beach",
		"jungle",
		"desert",
		"flat",
		"the_nether",
		"mesa",
		"plain",
		"mushroom_island",
		"ocean",
		"river",
		"savanna",
		"stone_beach",
		"swamp",
		"taiga",
		"the_end"
	],
	"sound": {
		"@meta": {
			"is_value": true
		}
	},
	"minecraft_color": [
		"dark_red",
		"red",
		"gold",
		"yellow",
		"dark_green",
		"green",
		"aqua",
		"dark_aqua",
		"dark_blue",
		"blue",
		"light_purple",
		"dark_purple",
		"white",
		"gray",
		"dark_gray",
		"black",
		"minecoin_gold"
	],
	"item_category": [
		"nature",
		"construction",
		"items",
		"equipment",
		"none",
		"commands"
	]
}